<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>呐喊彷徨</title>
    <description></description>
    <link>/ScreamSwing</link>
    <atom:link href="/ScreamSwingfeed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 29 Dec 2014 20:45:29 +0800</pubDate>
    <lastBuildDate>Mon, 29 Dec 2014 20:45:29 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>阅《黄金时代》另类感</title>
        <description>&lt;hr&gt;

&lt;p&gt;昨夜，小读王小波的《黄金时代》，在其玩味的言语之间停不下来，只是未曾够得，只是看了样章而已；今特查了他得生平和文集，也算很是青睐。知晓此人倒也很久，前段时间更也知道他对于计算机这块也是颇有研究，也算中国第一代程序员了，今 才读其文章，倒有一个蛮荒诞缺有意思的缘由：就是这“小波”之名 实在过于平实常俗了，所以对其本人也产生了偏差之见；想来这该是国人的一个习惯，于我更是尤盛！譬如这般讲述，提起曹沾，王卫国，陈喆（zhe）等些许人物，大家可能都不怎么熟悉，可都也知道曹雪芹，路遥，琼瑶这些个称谓；对，后者三个即是前三个的号或者是笔名；本名则年幼时分父母抑或是其他长辈所命名，并非自己本人之所爱，这也使得旧时代大多人除了本名外另也起其字，其号（当然也还有被封的号等等，究其何来，不做考究）；这便是他们对名及字的重视；别人称呼之，也有呼其如：“曹阿瞒”，“曹孟德”，“周公瑾”等等；不可否认的是，苏东坡的名气倒比苏轼的要大不是么？有人可能会说这是旧时候文人们嗜好；其实也不尽然，那时文人武者，即便商贾小贩，应该也是有的（不做学术 概不予证）；即便现如今，有“讲究”的父母对儿女的命名不也是搜肠刮肚，尽其所才以成之？且更有识者，便会查古文典籍，宜搜其一二字合之成名，给子女以儒雅之名，当然也秉承着父母的希冀和祝福云云。就好如现在女人们上街怕撞衫一般的情性，希望儿女之名可另辟蹊径，张扬个性，儒雅得体，予益成长。这当是一种事实，也不予云证。总之一句，跟外贸协会的人(普通人都是)见到人得外贸一般，对着名字也是有诸多的挑剔，不是么？譬如我就也是，对轩这个字就大为所爱，那些年自己玩儿所启用的代号大多都带此字；另外对斜王旁的字也很颇为中意。琳琅琼璞（一直以来也自字：琼璞，呵）等等；今记载其感，意在说明：国人大多有始中外贸之评判，对代号也有此判（只是更为隐匿点罢了）；也同外贸之故，光看外表很多时候普通人不一定能看的准，于称谓也是如此；王小波，嗯，称谓普通，其文大有一番可以玩味不是么？但，倘若他也有一个另类霸气响亮好听的名字，想必和这《黄金时代》也不会如此相见恨晚了不是？名 ，人之第二张脸，当慎而造，我就欲更名...。&lt;/p&gt;

&lt;p&gt;----------------------2014-12-27日暮 于深圳南山 国际E城----------------------&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Sat, 27 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/27/readbook-thoughts.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/27/readbook-thoughts.html</guid>
        
        
      </item>
    
      <item>
        <title>59分钟学会正则表达式</title>
        <description>&lt;p&gt;推荐几个正则表达式编辑器
&lt;a href=&quot;https://www.debuggex.com/&quot;&gt;Debuggex&lt;/a&gt;
&lt;a href=&quot;http://www.pyregex.com/&quot;&gt;PyRegex&lt;/a&gt;
&lt;a href=&quot;http://www.regexper.com/&quot;&gt;Regexper&lt;/a&gt;
正则表达式是一种查找以及字符串替换操作。正则表达式在文本编辑器中广泛使用，比如正则表达式被用于：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;检查文本中是否含有指定的特征词
找出文中匹配特征词的位置
从文本中提取信息，比如：字符串的子串
修改文本&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;与文本编辑器相似，几乎所有的高级编程语言都支持正则表达式。在这样的语境下，“文本”也就是一个字符串，可以执行的操作都是类似的。
一些编程语言（比如Perl，JavaScript）会检查正则表达式的语法。&lt;/p&gt;

&lt;h2&gt;正则表达式是什么？&lt;/h2&gt;

&lt;p&gt;正则表达式只是一个字符串。没有长度限制，但是，这样的正则表达式长度往往较短。如下所示是一些正则表达式的例子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I had a \S+ day today&lt;/li&gt;
&lt;li&gt;[A-Za-z0-9-_]{3,16}&lt;/li&gt;
&lt;li&gt;\d\d\d\d-\d\d-\d\d&lt;/li&gt;
&lt;li&gt;v(\d+)(.\d+)*&lt;/li&gt;
&lt;li&gt;TotalMessages=&amp;quot;(.*?)&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;lt;[^&amp;lt;&amp;gt;]&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些字符串实际上都是微型计算机程序。正则表达式的语法，实际上是一种轻量级、简洁、适用于特定领域的编程语言。记住这一点，那么你就很容易理解下面的事情：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;每一个正则表达式，都可以分解为一个指令序列，比如“先找到这样的字符，再找到那样的字符，再从中找到一个字符。。。”
每一个正则表达式都有输入（文本）和输出（匹配规则的输出，有时是修改后的文本）
正则表达式有可能出现语法错误——不是所有的字符串都是正则表达式
正则表达式语法很有个性，也可以说很恐怖
有时可以通过编译，使得正则表达式执行更快&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在实现中，正则表达式还有其他的特点。本文将重点讨论正则表达式的核心语法，在几乎所有的正则表达式中都可以见到这些规则。&lt;/p&gt;

&lt;p&gt;特别提示：正则表达式与文件通配语法无关，比如 *.xml&lt;/p&gt;

&lt;p&gt;正则表达式的基础语法&lt;/p&gt;

&lt;h2&gt;字符&lt;/h2&gt;

&lt;p&gt;正则表达式中包含了一系列的字符，这些字符只能匹配它们本身。有一些被称为“元字符”的特殊字符，可以匹配一些特殊规则。&lt;/p&gt;

&lt;p&gt;如下所示的例子中，我用红色标出了元字符。&lt;/p&gt;

&lt;p&gt;I had a &lt;font color=&quot;red&quot;&gt;\S+&lt;/font&gt; day today&lt;br&gt;
&lt;font color=&quot;red&quot;&gt;[A-Za-z0-9-_]{3,16}&lt;/font&gt;&lt;br&gt;
&lt;font color=&quot;red&quot;&gt;\d\d\d\d-\d\d-\d\d&lt;/font&gt;&lt;br&gt;
v&lt;font color=&quot;red&quot;&gt;\d+)(.\d+)&lt;em&gt;&lt;/font&gt;&lt;br&gt;
TotalMessages=&amp;quot;&lt;font color=&quot;red&quot;&gt;(.&lt;/em&gt;?)&lt;/font&gt;&amp;quot;&lt;br&gt;
&lt;font color=&quot;red&quot;&gt;[^&amp;lt;&amp;gt;]*&lt;/font&gt;   &lt;/p&gt;

&lt;p&gt;大部分的字符，包括所有的字母和数字字符，是普通字符。也就意味着，它们只能匹配它们自己，如下所示的正则表达式：&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;red&quot;&gt; cat &lt;/font&gt;  意味着，只能匹配一个字符串，以“c”开头，然后是字符“a”，紧跟着是字符“t”的字符串。&lt;/p&gt;

&lt;p&gt;到目前为止，正则表达式的功能类似于&lt;/p&gt;

&lt;p&gt;常规的Find功能
Java中的 String.indexOf() 函数
PHP中的 strpos()函数
等等
注意：不做特殊说明，正则表达式中是区分大小写的。但是，几乎所有正则表达式的实现，都会提供一个Flag用来控制是否区分大小写。&lt;/p&gt;

&lt;h2&gt;点“.”&lt;/h2&gt;

&lt;p&gt;我们第一个要讲解的元字符是“.”。这个符号意味着可以匹配任意一个字符。如下所示的正则表达式：&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;red&quot;&gt;c.t&lt;/font&gt; 意味着匹配“以c开头,之后是任意一个字符，紧跟着是字母t”的字符串。&lt;/p&gt;

&lt;p&gt;在一段文本中，这样的正则表达式可以用来找出cat, cot, czt这样的字符串，甚至可以找出c.t这样的组合，但是不能找到ct或者是coot这样的字符串。&lt;/p&gt;

&lt;p&gt;使用反斜杠“\”可以忽略元字符，使得元字符的功能与普通字符一样。所以，正则表达式&lt;/p&gt;

&lt;p&gt;c.t&lt;/p&gt;

&lt;p&gt;表示“找到字母c,然后是一个句号（“.”），紧跟着字母t”&lt;/p&gt;

&lt;p&gt;反斜杠本身也是一个元字符，这意味着反斜杠本身也可以通过相似的方法变回到普通字符的用途。因此，正则表达式&lt;/p&gt;

&lt;p&gt;c\t&lt;/p&gt;

&lt;p&gt;表示匹配“以字符c开头,然后是一个反斜杠，紧跟着是字母t”的字符串。&lt;/p&gt;

&lt;p&gt;注意！在正则表达式的实现中，.是不能用于匹配换行符的。”换行符“的表示方法在不同实现中也不同。实际编程时，请参考相关文档。在本文中，我认为.是可以匹配任意字符的。实现环境通常会提供一个Flag标志位，来控制这一点。&lt;/p&gt;

&lt;h2&gt;字符类&lt;/h2&gt;

&lt;p&gt;字符类是一组在方括号内的字符，表示可以匹配其中的任何一个字符。&lt;/p&gt;

&lt;p&gt;正则表达式c[aeiou]t，表示可以匹配的字符串是”以c开头，接着是aeiou中的任何一个字符，最后以t结尾”。在文本的实际应用中，这样的正则表达式可以匹配：cat,cet,cit,cot,cut五种字符串。
正则表达式[0123456789]表示匹配任意一个整数。
正则表达式[a]表示匹配单字符a。
包含忽略字符的例子&lt;/p&gt;

&lt;p&gt;a表示匹配字符串[a]
[[]\ab]表示匹配的字符为”[&amp;quot;或者&amp;#39;&amp;#39;]”或者”a”,或者”b”
[\[]]表示匹配的字符为”\”或者 “[”或者&amp;quot;]“
在字符类中，字符的重复和出现顺序并不重要。[dabaaabcc]与[abc]是相同的&lt;/p&gt;

&lt;p&gt;重要提示：字符类中和字符类外的规则有时不同，一些字符在字符类中是元字符，在字符类外是普通字符。一些字符正好相反。
还有一些字符在字符类中和字符类外都是元字符，这要视情况而定！&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;purple&quot;&gt;比如，.表示匹配任意一个字符，而[.]表示匹配一个全角句号。这不是一回事！&lt;/font&gt;&lt;/p&gt;

&lt;h2&gt;字符类的范围&lt;/h2&gt;

&lt;p&gt;在字符集中，你可以通过使用短横线来表示匹配字母或数字的范围。&lt;/p&gt;

&lt;p&gt;[b-f]与[b,c,d,e,f]相同，都是匹配一个字符”b”或”c”或”d”或”e”或”f”
[A-Z]与[ABCDEFGHIJKLMNOPQRSTUVWXYZ]相同，都是匹配任意一个大写字母。
[1-9]与[123456789]相同，都是匹配任意一个非零数字。&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;使用目前我们已经讲解的正则表达式相关知识，在字典中匹配找到含有最多连续元音的单词，同时找到含有最多连续辅音的单词。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;[aeiou][aeiou][aeiou][aeiou][aeiou][aeiou] 这样的正则表达式，可以匹配连续含有六个元音的单词，比如 euouae 和 euouaes。&lt;/p&gt;

&lt;p&gt;同样的，恐怖的正则表达式[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz] 可以找到连续含有十个辅音的单词sulphhydryls. &lt;/p&gt;

&lt;p&gt;下文中，我们会讲解，怎样有效缩短这样的正则表达式长度。&lt;/p&gt;

&lt;p&gt;在字符类之外，短横线没有特殊含义。正则表达式a-z，表示匹配字符串“以a开头，然后是一个短横线，以z结尾”。&lt;/p&gt;

&lt;p&gt;范围和单独的字符可能在一个字符类中同时出现：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[0-9.,]表明匹配一个数字，或者一个全角句号，或者一个逗号&lt;/li&gt;
&lt;li&gt;[0-9a-fA-F]意味着匹配一个十六进制数&lt;/li&gt;
&lt;li&gt;[a-zA-Z0-9-]意味着匹配一个字母、数字或者一个短横线&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;使用已经介绍过的正则表达式知识，匹配YYYY-MM-DD格式的日期。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].&lt;/p&gt;

&lt;p&gt;同样的，下文中，我们会介绍怎样有效减少这样的正则表达式长度。&lt;/p&gt;

&lt;p&gt;虽然你可以尝试在正则表达式中使用一些非字母或数字作为范围的最后一个符号，比如abc[!-/]def，但是这并不是在每种实现中都合法。即使这样的语法是合法的，这样的语义也是模糊的。最好不要这样使用。&lt;/p&gt;

&lt;p&gt;同时，你必须谨慎选择范围的边界值。即使[A-z]在你使用的实现中，是合法的，也可能会产生无法预料的运行结果。（注意，在z到a之间，是有字符存在的）&lt;/p&gt;

&lt;p&gt;注意：范围的字符值代表的是字符而已，并不能代表数值范围，比如[1-31]表示匹配一个数字，是1或者2或者3，而不是匹配一个数值在1到31之间的数。&lt;/p&gt;

&lt;h2&gt;字符类的反义&lt;/h2&gt;

&lt;p&gt;你可以在字符类的起始位放一个反义符。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[^a]表示匹配任何不是“a”的字符&lt;/li&gt;
&lt;li&gt;[^a-zA-Z0-9]表示匹配任何不是字母也不是数字的字符&lt;/li&gt;
&lt;li&gt;[^abc]匹配一个为“^”或者a或者b或者c的字符&lt;/li&gt;
&lt;li&gt;[^^]表示匹配任何不为“^”的字符&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;在字典中，找到一个不满足“在e之前有i，但是没有c”的例子。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;cie和[^c]ei都要可以找到很多这样的例子，比如ancient,science,viel,weigh&lt;/p&gt;

&lt;h2&gt;转义字符类&lt;/h2&gt;

&lt;p&gt;\d这个正则表达式与[0-9]作用相同，都是匹配任何一个数字。（要匹配\d,应该使用正则表达式\d）  &lt;/p&gt;

&lt;p&gt;\w与[0-9A-Za-z]相同，都表示匹配一个数字或字母字符   &lt;/p&gt;

&lt;p&gt;\s意味着匹配一个空字符（空格，制表符，回车或者换行）  &lt;/p&gt;

&lt;h2&gt;另外&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;\D与[^0-9]相同，表示匹配一个非数字字符。&lt;/li&gt;
&lt;li&gt;\W与[^0-9A-Za-z]相同，表示匹配一个非数字同时不是字母的字符。&lt;/li&gt;
&lt;li&gt;\S表示匹配一个非空字符。
这些是你必须掌握的字符。你可能已经注意到了，一个全角句号“.”也是一个字符类，可以匹配任意一个字符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多正则表达式的实现中，提供了更多的字符类，或者是标志位在ASCII码的基础上，扩展现有的字符类。&lt;/p&gt;

&lt;p&gt;特别提示：统一字符集中包含除了0至9之外的更多数字字符，同样的，也包含更多的空字符和字母字符。实际使用正则表达式时，请仔细查看相关文档。&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;简化正则表达式 [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;\d\d\d\d-\d\d-\d\d.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;重复&lt;/h2&gt;

&lt;p&gt;在字符或字符集之后，你可以使用{ }大括号来表示重复&lt;/p&gt;

&lt;p&gt;正则表达式a{1}与a意思相同，都表示匹配字母a
a{3}表示匹配字符串“aaa”
a{0}表示匹配空字符串。从这个正则表达式本身来看，它毫无意义。如果你对任何文本执行这样的正则表达式，你可以定位到搜索的起始位置，即使文本为空。
a{2}表示匹配字符串“a{2}”
在字符类中，大括号没有特殊含义。[{}]表示匹配一个左边的大括号，或者一个右边的大括号&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;简化下面的正则表达式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;z.......z&lt;/li&gt;
&lt;li&gt;\d\d\d\d-\d\d-\d\d&lt;/li&gt;
&lt;li&gt;[aeiou][aeiou][aeiou][aeiou][aeiou][aeiou]&lt;/li&gt;
&lt;li&gt;[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;z.{7}z
\d{4}-\d{2}-\d{2}
[aeiou]{6}
[bcdfghjklmnpqrstvwxyz]{10}
注意：重复字符是没有记忆性的，比如[abc]{2}表示先匹配”a或者b或者c”，再匹配”a或者b或者c”，与匹配”aa或者ab或者ac或者ba或者bb或者bc或者ca或者cb或者cc“一样。[abc]{2}并不能表示匹配”aa或者bb或者cc“&lt;/p&gt;

&lt;h2&gt;指定重复次数范围&lt;/h2&gt;

&lt;p&gt;重复次数是可以指定范围的&lt;/p&gt;

&lt;p&gt;x{4,4}与x{4}相同
colou{0,1}r表示匹配colour或者color
a{3,5}表示匹配aaaaa或者aaaa或者aaa
注意这样的正则表达式会优先匹配最长字符串，比如输入 I had an aaaaawful day会匹配单词aaaaawful中的aaaaa，而不会匹配其中的aaa。&lt;/p&gt;

&lt;p&gt;重复次数是可以有范围的，但是有时候这样的方法也不能找到最佳##答案。如果你的输入文本是I had an aaawful daaaaay那么在第一次匹配时，只能找到aaawful，只有再次执行匹配时才能找到daaaaay中的aaaaa.&lt;/p&gt;

&lt;h2&gt;重复次数的范围可以是开区间&lt;/h2&gt;

&lt;p&gt;a{1，}表示匹配一个或一个以上的连续字符a。依然是匹配最长字符串。当找到第一个a之后，正则表达式会尝试匹配尽量多个的连续字母a。
.{0,}表示匹配任意内容。无论你输入的文本是什么，即使是一个空字符串，这个正则表达式都会成功匹配全文并返回结果。&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;使用正则表达式找到双引号。要求输入字符串可能包含任意个字符。&lt;/p&gt;

&lt;p&gt;调整你的正则表达式使得在一对双引号中间不再包含其他的双引号。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;&amp;quot;.{0,}&amp;quot;, 然后 &amp;quot;[^&amp;quot;]{0,}&amp;quot;.&lt;/p&gt;

&lt;p&gt;关于重复的转义字符&lt;/p&gt;

&lt;p&gt;？与{0,1}相同，比如，colou?r表示匹配colour或者color&lt;/p&gt;

&lt;p&gt;&lt;em&gt;与{0,}相同。比如，.&lt;/em&gt;表示匹配任意内容&lt;/p&gt;

&lt;p&gt;+与{1，}相同。比如,\w+表示匹配一个词。其中”一个词”表示由一个或一个以上的字符组成的字符串，比如_var或者AccountName1.&lt;/p&gt;

&lt;p&gt;这些是你必须知道的常用转义字符，除此之外还有:&lt;/p&gt;

&lt;p&gt;\?*+ 表示匹配字符串”?&lt;em&gt;+”
[?&lt;/em&gt;+]表示匹配一个问号，或者一个*号，或者一个加号&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;简化下列的正则表达式:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;.{0,}&amp;quot; and &amp;quot;[^&amp;quot;]{0,}&amp;quot;
x?x?x?
y*y*
z+z+z+z+
##答案
&amp;quot;.*&amp;quot; and &amp;quot;[^&amp;quot;]*&amp;quot;
x{0,3}
y*
z{4,}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;写出正则表达式，寻找由非字母字符分隔的两个单词。如果是三个呢？六个呢？&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;\w+\W+\w+, \w+\W+\w+\W+\w+, \w+\W+\w+\W+\w+\W+\w+\W+\w+\W+\w+.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下文中，我们将简化这个正则表达式。&lt;/p&gt;

&lt;h2&gt;非贪婪匹配&lt;/h2&gt;

&lt;p&gt;正则表达式 “.*” 表示匹配双引号，之后是任意内容，之后再匹配一个双引号。注意，其中匹配任意内容也可以是双引号。通常情况下，这并不是很有用。通过在句尾加上一个问号，可以使得字符串重复不再匹配最长字符。&lt;/p&gt;

&lt;p&gt;\d{4,5}?表示匹配\d\d\d\d或者\d\d\d\d\d。也就是和\d{4}一样
colou??r与colou{0,1}r相同，表示找到color或者colour。这与colou?r一样。
“.*?”表示先匹配一个双引号，然后匹配最少的字符，然后是一个双引号，与上面两个例子不同，这很有用。&lt;/p&gt;

&lt;h2&gt;选择匹配&lt;/h2&gt;

&lt;p&gt;你可以使用&lt;font color=&quot;red&quot;&gt;|&lt;/font&gt;来分隔可以匹配的不同选择:&lt;/p&gt;

&lt;p&gt;cat|dog表示匹配”cat”或者”dog”
red|blue|以及red||blue以及|red|blue都表示匹配red或者blue或者一个空字符串
a|b|c与[abc]相同
cat|dog||表示匹配”cat”或者”dog”或者一个分隔符”|“
[cat|dog]表示匹配a或者c或者d或者g或者o或者t或者一个分隔符“|”&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;简化下列正则表达式:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;s|t|u|v|w
aa|ab|ba|bb
[abc]|[^abc]
[^ab]|[^bc]
[ab][ab][ab]?[ab]?
##答案

[s-w]
[ab]{2}
.
[^b]
[ab]{2,4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;使用正则表达式匹配1到31之间的整数，[1-31]不是正确答案！&lt;/p&gt;

&lt;p&gt;这样的正则表达式不唯一. [1-9]|[12][0-9]|3[01] 是其中之一。&lt;/p&gt;

&lt;h2&gt;分组&lt;/h2&gt;

&lt;p&gt;你可以使用括号表示分组:&lt;/p&gt;

&lt;p&gt;通过使用 Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day 匹配一周中的某一天
(\w&lt;em&gt;)ility  与 \w&lt;/em&gt;ility 相同。都是匹配一个由”ility”结尾的单词。稍后我们会讲解，为何第一种方法更加有用。
表示匹配一对括号。
[()]表示匹配任意一个左括号或者一个右括号&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;在《时间机器中》找到一对括号中的内容，然后通过修改正则表达式，找到不含括号的内容。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;.∗. 然后是, [()]∗.&lt;/p&gt;

&lt;p&gt;分组可以包括空字符串：&lt;/p&gt;

&lt;p&gt;(red|blue)表示匹配red或者blue或者是一个空字符串
abc()def与abcdef相同
你也可以在分组的基础上使用重复：&lt;/p&gt;

&lt;p&gt;(red|blue)？与(red|blue|)相同
\w+(\s+\w+)表示匹配一个或多个由空格分隔的单词&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;简化正则表达式 \w+\W+\w+\W+\w+ 以及 \w+\W+\w+\W+\w+\W+\w+\W+\w+\W+\w+.&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;\w+(\W+\w+){2}, \w+(\W+\w+){5}.&lt;/p&gt;

&lt;h2&gt;单词分隔符&lt;/h2&gt;

&lt;p&gt;在单词和非单词之间有单词分隔符。记住，一个单词\w是[0-9A-Za-z&lt;em&gt;]，而非单词字符是\W(大写)，表示[^0-9A-Za-z&lt;/em&gt;].&lt;/p&gt;

&lt;p&gt;在文本的开头和结尾通常也有单词分隔符。&lt;/p&gt;

&lt;p&gt;在输入文本it’s a cat中，实际有八个单词分隔符。如果我们在cat之后在上一个空格，那就有九个单词分隔符。.&lt;/p&gt;

&lt;p&gt;\b表示匹配一个单词分隔符
\b\w\w\w\b表示匹配一个三字母单词
a\ba表示匹配两个a中间有一个单词分隔符。这个正则表达式永远不会有匹配的字符，无论输入怎样的文本。
单词分隔符本身并不是字符。它们的宽度为0。下列正则表达式的作用不同&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(\bcat)\b&lt;/li&gt;
&lt;li&gt;(\bcat\b)&lt;/li&gt;
&lt;li&gt;\b(cat)\b&lt;/li&gt;
&lt;li&gt;\b(cat\b)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;在词典中找到最长的单词。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;在尝试之后发现，\b.{45,}\b可以在字典中找到最长单词&lt;/p&gt;

&lt;h2&gt;换行符&lt;/h2&gt;

&lt;p&gt;一篇文本中可以有一行或多行，行与行之间由换行符分隔，比如：&lt;/p&gt;

&lt;p&gt;Line一行文字 
Line break换行符 
Line一行文字 
Line break换行符 
… 
Line break换行符 
Line一行文字 
注意，所有的文本都是以一行结束的，而不是以换行符结束。但是，任意一行都可能为空，包括最后一行。&lt;/p&gt;

&lt;p&gt;行的起始位置，是在换行符和下一行首字符之间的空间。考虑到单词分隔符，文本的起始位置也可以当做是首行位置。&lt;/p&gt;

&lt;p&gt;最后一行是最后一行的尾字符和换行符之间的空间。考虑到单词分隔符，文本的结束也可以认为是行的结束。&lt;/p&gt;

&lt;p&gt;那么新的格式表示如下:&lt;/p&gt;

&lt;p&gt;Start-of-line, line, end-of-line
Line break
Start-of-line, line, end-of-line
Line break
…
Line break
Start-of-line, line, end-of-line
基于上述概念:&lt;/p&gt;

&lt;p&gt;^表示匹配行的开始位置&lt;br&gt;
$表示匹配行的结束位置&lt;br&gt;
^&amp;amp;表示一个空行&lt;br&gt;
^.&lt;em&gt;&amp;amp; 表示匹配全文内容，因为行的开始符号也是一个字符，&amp;quot;.&amp;quot;会匹配这个符号。找到单独的一行，可以使用 ^.&lt;/em&gt;?$
^\$表示匹配字符串“^$”&lt;br&gt;
[$]表示匹配一个$。但是，[^]不是合法的正则表达式。记住在方括号中，字符有不同的特殊含义。要想在方括号内匹配^，必须用[^]
与字符分隔符一样，换行符也不是字符。它们宽度为0.如下所示的正则表达式作用不同： &lt;/p&gt;

&lt;p&gt;(^cat)$ 
(^cat$) 
^(cat)$ 
^(cat$) &lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;使用正则表达式在《时间机器》中找到最长的一行。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;使用正则表达式^.{73,}$可以匹配长度为73的一行&lt;/p&gt;

&lt;h2&gt;文本分界&lt;/h2&gt;

&lt;p&gt;在很多的正则表达式实现中，将^和$作为文本的开始符号和结束符号。&lt;/p&gt;

&lt;p&gt;还有一些实现中，用\A和\z作为文本的开始和结束符号。&lt;/p&gt;

&lt;h2&gt;捕捉和替换&lt;/h2&gt;

&lt;p&gt;从这里开始，正则表达式真正体现出了它的强大。&lt;/p&gt;

&lt;h2&gt;捕获组&lt;/h2&gt;

&lt;p&gt;你已经知道了使用括号可以匹配一组符号。使用括号也可以捕获子串。假设正则表达式是一个小型计算机程序，那么捕获子串就是它输出的一部分。&lt;/p&gt;

&lt;p&gt;正则表达式(\w&lt;em&gt;)ility表示匹配以ility结尾的词。第一个被捕获的部分是由\w&lt;/em&gt;控制的。比如，输入的文本内容中有单词accessibility，那么首先被捕获的部分是accessib。如果输入的文本中有单独的ility，则首先被捕获的是一个空字符串。&lt;/p&gt;

&lt;p&gt;你可能会有很多的捕获字符串，它们可能靠得很近。捕获组从左向右编号。也就是只需要对左括号计数。&lt;/p&gt;

&lt;p&gt;假设有这样的正则表达式：(\w+) had a ((\w+) \w+)&lt;/p&gt;

&lt;p&gt;输入的内容是：I had a nice day &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;捕获组1：I
捕获组2：nice day
捕获组3:nice
在一些正则表达式的实现中，你可以从零开始编号，编号零表示匹配整句话：I had a nice day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在其他的实现中，如果没有制定捕获组，那么捕获组1会自动地填入捕获组0的信息。&lt;/p&gt;

&lt;p&gt;是的，这也意味着会有很多的括号。有一些正则表达式的实现中，提供了“非捕获组”的语法，但是这样的语法并不是标准语法，因此我们不会介绍。&lt;/p&gt;

&lt;p&gt;从一个成功的匹配中返回的捕获组个数，与使用原来的正则表达式获得的捕获组个数相同。记住这一点，你可以解释一些奇怪的现象。.&lt;/p&gt;

&lt;p&gt;正则表达式（（cat）|dog）表示匹配cat或者dog。这里有两个捕获组，如果输入文本是dog，那么捕获组1是dog,捕获组2为空。&lt;/p&gt;

&lt;p&gt;正则表达式a(\w)*表示匹配一个以a开头的单词。这里只有一个捕获组&lt;/p&gt;

&lt;p&gt;如果输入文本为a,捕获组1为空。
如果输入文本为ad,捕获组为d
如果输入文本为avocado，捕获组1为v。但是捕获组0表示整个单词avocado.&lt;/p&gt;

&lt;h2&gt;替换&lt;/h2&gt;

&lt;p&gt;假如你使用了一个正则表达式去匹配字符串，你可以描述另外一个字符串来替换其中的匹配字符。用来替换的字符串称为替换表达式。它的功能类似于&lt;/p&gt;

&lt;p&gt;常规的Replace会话
Java中的String.replace()函数
PHP的str_replace()函数
等等&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;将《时间机器》中所有的元音字母替换为r。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;使用正则表达式[aeiou]以及[AEIOU]，对应的替换字符串分别为r,R.&lt;/p&gt;

&lt;p&gt;但是，你可以在替换表达式中引用捕获组。这是在替换表达式中，你可以唯一操作的地方。这也是非常有效的，因为这样你就不用重构你找到的字符串。&lt;/p&gt;

&lt;p&gt;假设你正在尝试将美国风格的日期表示MM/DD/YY替换为ISO 8601日期表示YYYY-MM-DD&lt;/p&gt;

&lt;p&gt;从正则表达式(\d\d)/(\d\d)/(\d\d)开始。注意，这其中有三个捕获组：月份，日期和两位的年份。
.捕获组的内容和捕获组编号之间用反斜杠分隔，因此你的替换表达式应该是20\3-\1-\2.
如果我们输入的文本中包含03/04/05表示2005年3月4日那么：
捕获组1:03
捕获组2：04
捕获组3：05
替换字符串2005-03-04.
在替换表达式中，你可以多次使用捕获组&lt;/p&gt;

&lt;p&gt;对于双元音，正则表达式为([aeiou])，替换表达式为\l\l
在替换表达式中不能使用反斜杠。比如，你在计算机程序中希望使用字符串中使用部分文本。那么，你必须在每个双引号或者反斜杠之前加上反斜杠。
你的正则表达式可以是([\&amp;quot;])。捕获组1是双引号或者反斜杠
你的替换表达式应该是\\l
在某些实现中，采用美元符号$代替\&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;使用正则表达式和替换表达式，将23h59这样的时间戳转化为23:59.&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;正则表达式finds the timestamps, 替换表达式\1:\2&lt;/p&gt;

&lt;h2&gt;反向引用&lt;/h2&gt;

&lt;p&gt;在一个正则表达式中，你也可以引用捕获组。这称作：反向引用&lt;/p&gt;

&lt;p&gt;比如，[abc]{2}表示匹配aa或者ab或者ac或者ba或者bb或者bc或者ca或者cb或者cc.但是{[abc]}\1表示只匹配aa或者bb或者cc.&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;在字典中，找到包含两次重复子串的最长单词，比如papa, coco&lt;/p&gt;

&lt;p&gt;\b(.{6,})\1\b 匹配 chiquichiqui.&lt;/p&gt;

&lt;p&gt;如果我们不在乎单词的完整性，我们可以忽略单词的分解，使用正则表达式 (.{7,})\1匹配countercountermeasure 以及 countercountermeasures.&lt;/p&gt;

&lt;h1&gt;使用正则表达式编程&lt;/h1&gt;

&lt;p&gt;特别提醒：&lt;/p&gt;

&lt;h2&gt;过度使用的反斜杠&lt;/h2&gt;

&lt;p&gt;在一些编程语言，比如Java中，对于包含正则表达式的字符串没有特殊标记。字符串有着自己的过滤规则，这是优先于正则表达式规则的，这是频繁使用反斜杠的原因。&lt;/p&gt;

&lt;p&gt;比如在Java中&lt;/p&gt;

&lt;p&gt;匹配一个数字，使用的正则表达式从\d变为代码中的String re= “\d”
匹配双引号字符串的正则表达式从&amp;quot;[^&amp;quot;]&lt;em&gt;&amp;quot; 变为String re = “\”[^\&amp;quot;]&lt;/em&gt;\”&amp;quot;
匹配反斜杠或者是左边方括号，或者右边方括号的正则表达式从[\[]] 变为String re = “[\\\&lt;/p&gt;

&lt;p&gt;]”;
String re = &amp;quot;\s&amp;quot;; 和String re = &amp;quot;[ \t\r\n]&amp;quot;; 是等价的. 注意它们实际执行调用时的层次不同。
在其他的编程语言中，正则表达式是由特殊标明的，比如使用/。下面是JavaScript的例子：&lt;/p&gt;

&lt;p&gt;匹配一个数字，\d会简单写成 var regExp = /\d/;.
匹配一个反斜杠或者一个左边的方括号或者一个右边的方括号， var regExp = /[\[]]/;
var regExp = /\s/; 和 var regExp = /[ \t\r\n]/; 是等价的
当然，这意味着在使用/时必须重复两次。比如找到URL必须使用var regExp = /https?:\/\//;.
我希望现在你能明白，我为什么让你特别注意反斜杠。&lt;/p&gt;

&lt;p&gt;动态正则表达式&lt;/p&gt;

&lt;p&gt;当你动态创建一个正则表达式的时候请特别小心。如果你使用的字符串不够完善的花，可能会有意想不到的匹配结果。这可能导致语法错误，更糟糕的是，你的正则表达式语法正确，但是结果无法预料。&lt;/p&gt;

&lt;p&gt;错误的Java代码：&lt;/p&gt;

&lt;p&gt;String sep = System.getProperty(“file.separator”); String[] directories = filePath.split(sep);&lt;/p&gt;

&lt;p&gt;Bug:String.split() 认为sep是一个正则表达式。但是，在Windows中，Sep是表示匹配一个反斜杠，也就是与正则表达式”\”相同。这个正则表达式是正确的，但是会返回一个异常：PatternSyntaxException.&lt;/p&gt;

&lt;p&gt;任何好的编程语言都会提供一种良好的机制来跳过字符串中所有的元字符。在Java中，你可以这样实现：&lt;/p&gt;

&lt;p&gt;String sep = System.getProperty(“file.separator”);&lt;/p&gt;

&lt;p&gt;String[] directories = filePath.split(Pattern.quote(sep));&lt;/p&gt;

&lt;p&gt;循环中的正则表达式&lt;/p&gt;

&lt;p&gt;将正则表达式字符串加入反复运行的程序中，是一种开销很大的操作。如果你可以在循环中避免使用正则表达式，你可以大大提高效率。&lt;/p&gt;

&lt;h2&gt;其他建议&lt;/h2&gt;

&lt;p&gt;输入验证&lt;/p&gt;

&lt;p&gt;正则表达式可以用来进行输入验证。但是严格的输入验证会使得用户体验较差。比如：
信用卡号
在一个网站上，我输入了我的卡号比如 1234 5678 8765 4321 网站拒绝接收。因为它使用了正则表达式\d{16}。&lt;/p&gt;

&lt;p&gt;正则表达式应该考虑到用户输入的空格和短横线。&lt;/p&gt;

&lt;p&gt;实际上，为什么不先过滤掉所有的非数字字符，然后再进行有效性验证呢？这样做，可以先使用\D以及空的替换表达式。&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;在不先过滤掉所有的非数字字符的情况下，使用正则表达式验证卡号的正确性。&lt;/p&gt;

&lt;h2&gt;答案&lt;/h2&gt;

&lt;p&gt;\D&lt;em&gt;(\d\D&lt;/em&gt;){16} is one of several variations which would accomplish this.&lt;/p&gt;

&lt;h2&gt;名字&lt;/h2&gt;

&lt;p&gt;不要使用正则表达式来验证姓名。实际上，即使可以，也不要企图验证姓名。&lt;/p&gt;

&lt;p&gt;程序员对名字的错误看法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名字中不含空格&lt;/li&gt;
&lt;li&gt;名字中没有连接符号&lt;/li&gt;
&lt;li&gt;名字中只会使用ASCII码字符&lt;/li&gt;
&lt;li&gt;名字中出现的字都在特殊字符集中&lt;/li&gt;
&lt;li&gt;名字至少要有M个字的长度&lt;/li&gt;
&lt;li&gt;名字不会超过N个字的长度&lt;/li&gt;
&lt;li&gt;人们只有一个名&lt;/li&gt;
&lt;li&gt;人们只有一个中间名&lt;/li&gt;
&lt;li&gt;人们只有一个姓（最后三条是从英语的人名考虑）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;电子邮件地址&lt;/h2&gt;

&lt;p&gt;不要使用正则表达式验证邮箱地址的正确性。&lt;/p&gt;

&lt;p&gt;首先，这样的验证很难是精确的。电子邮件地址是可以用正则表达式验证的，但是表达式会非常的长并且复杂。&lt;/p&gt;

&lt;p&gt;短的正则表达式会导致错误。（你知道吗？电子邮箱地址中会有一些注释）&lt;/p&gt;

&lt;p&gt;第二，即使一个电子邮件地址可以成功匹配正则表达式，也不代表这个邮箱实际存在。邮箱的唯一验证方法，是发送验证邮件。&lt;/p&gt;

&lt;h2&gt;注意&lt;/h2&gt;

&lt;p&gt;在严格的应用场景中，不要使用正则表达式来解析HTML或者XML。解析HTML或者XML：&lt;/p&gt;

&lt;p&gt;使用简单的正则表达式不能完成
总体来说非常困难
已经有其他的方法解决
找到一个已经有的解析库来完成这个工作&lt;/p&gt;

&lt;h1&gt;这就是59分钟的全部内容&lt;/h1&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h2&gt;总结：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;字符: a b c d 1 2 3 4 etc.&lt;/li&gt;
&lt;li&gt;字符类: . [abc] [a-z] \d \w \s&lt;/li&gt;
&lt;li&gt;. 代表任何字符&lt;/li&gt;
&lt;li&gt;\d 表示“数字”&lt;/li&gt;
&lt;li&gt;\w   表示”字母”, [0-9A-Za-z_]&lt;/li&gt;
&lt;li&gt;\s   表示 “空格, 制表符,回车或换行符”&lt;/li&gt;
&lt;li&gt;否定字符类: [^abc] \D \W \S&lt;/li&gt;
&lt;li&gt;重复: {4} {3,16} {1,} ? * +&lt;/li&gt;
&lt;li&gt;? 表示 “零次或一次”&lt;/li&gt;
&lt;li&gt;* 表示 “大于零次”&lt;/li&gt;
&lt;li&gt;+ 表示 “一次或一次以上”&lt;/li&gt;
&lt;li&gt;如果不加上？，所有的重复都是最长匹配的（贪婪）&lt;/li&gt;
&lt;li&gt;分组: (Septem|Octo|Novem|Decem)ber&lt;/li&gt;
&lt;li&gt;词，行以及文本的分隔: \b ^ $ \A \z&lt;/li&gt;
&lt;li&gt;转义字符: \1 \2 \3 etc. (在匹配表达式和替换表达式中都可用)&lt;/li&gt;
&lt;li&gt;元字符: . \ [ ] { } ? * + | ( ) ^ $&lt;/li&gt;
&lt;li&gt;在字符类中使用元字符: [ ] \ - ^&lt;/li&gt;
&lt;li&gt;使用反斜杠可以忽略元字符: \&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;致谢&lt;/h2&gt;

&lt;p&gt;正则表达式非常常用而且非常有用。每个人在编辑文本或是编写程序时都必须了解怎样使用正则表达式。&lt;/p&gt;

&lt;h2&gt;练习&lt;/h2&gt;

&lt;p&gt;选择正则表达式的某种实现，阅读相关文档。我保证，你会学到更多。
&lt;a href=&quot;http://blog.jobbole.com/63398/&quot;&gt;原文链接地址&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/25/regular-expression.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/25/regular-expression.html</guid>
        
        
      </item>
    
      <item>
        <title>Lua代码片段收集</title>
        <description>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;cm&quot;&gt;--[[@Func :闭包&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    @Desc : 当一个函数内部嵌套另一个函数定义时，内部的函数体可以访问外部的函数的局部变量，这种特征我们称作词法定界]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Desc : 序列化Lua表(Convert Lua-Table To String)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ser_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;number&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;table&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dotkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;number&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ser_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;table.concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;do local ret=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ser_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ret&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;table.concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; return ret end&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- 实现Java字符串的Hash算法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4294967296&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string.sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;c1&quot;&gt;--Desc : coroutine实现异步通信-取代callback&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runAsyncFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.running&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- test it as follows:[实现A-B-C严格依次Call]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;O&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 

    &lt;span class=&quot;c1&quot;&gt;-- delay 3 second execute&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start second is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%S&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%S&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;B&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;now second is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%S&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;os.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jeffValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;funcA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;funcB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;funcC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- execute test code输出如下:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;   
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 24 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/24/lua-codepart.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/24/lua-codepart.html</guid>
        
        
      </item>
    
      <item>
        <title>Lua table之弱引用</title>
        <description>&lt;p&gt;Lua采用了基于垃圾收集的内存管理机制，因此对于程序员来说，在很多时候内存问题都将不再困扰他们。然而任何垃圾收集器都不是万能的，在有些特殊情况下，垃圾收集器是无法准确的判断是否应该将当前对象清理。这样就极有可能导致很多垃圾对象无法被释放。为了解决这一问题，就需要Lua的开发者予以一定程度上的配合。比如，当某个table对象被存放在容器中，而容器的外部不再有任何变量引用该对象，对于这样的对象，Lua的垃圾收集器是不会清理的，因为容器对象仍然引用着他。如果此时针对该容器的应用仅限于查找，而不是遍历的话，那么该对象将永远不会被用到。事实上，对于这样的对象我们是希望Lua的垃圾收集器可以将其清理掉的。见如下代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;collectgarbage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--输出1和2&lt;/p&gt;

&lt;p&gt;在执行垃圾收集之后，table a中的两个key都无法被清理，但是对value等于1的key而言，如果后面的逻辑不会遍历table a的话，那么我们就可以认为该对象内存泄露了。在Lua中提供了一种被称为弱引用table的机制，可以提示垃圾收集器，如果某个对象，如上面代码中的第一个table key，只是被弱引用table引用，那么在执行垃圾收集时可以将其清理。&lt;/p&gt;

&lt;p&gt;Lua是具备自动内存管理的,我们可以只管创建对象，无须删除对象(当然，对于不要的对象你需要设置一下nil值)，Lua会自动删除那些被认为是垃圾的对象。
问题就出现在，什么对象才是垃圾对象，有些时候，我们很清楚某个对象是垃圾，但是，Lua却无法发现。正如上面所述，就需要Lua的开发者予以一定程度上的配合;再比如下面这个例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 使用一个table作为t的key值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 又使用一个table作为t的key值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 强制进行一次垃圾收集&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;collectgarbage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-- 其结果输出是：  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;key1:1&lt;br&gt;
key2:1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这很符合常理，也在我们的预计当中，虽然我们在给t赋值之后，将key1和key2都赋值为nil了。
但是，因为存在table对key1,key2的引用，已经添加到table中的key值是不会因此而被当做垃圾的。
换句话说，key1本身已经是nil值，但它曾经所指向的&lt;code&gt;内容&lt;/code&gt;依然存放在t中。key2也是一样的情况。
所以我们最后还是能输出key1和key2的name字段。&lt;/p&gt;

&lt;p&gt;那么，如果我们把某个table作为另一个table的key值后，希望当table设为nil值时，另一个table的那一条字段也被删除。
应该如何实现？这时候就要用到弱引用table了，弱引用table的实现也是利用了元表。&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;red&quot;&gt;Lua中的弱引用表提供了3中弱引用模式，即key是弱引用、value是弱引用，以及key和value均是弱引用。不论是哪种类型的弱引用table，只要有一个key或value被回收，那么它们所在的整个条目都会从table中删除。&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;一个table的弱引用类型是通过其元表的__mode字段来决定的。如果该值为包含字符&amp;quot;k&amp;quot;，那么table就是key弱引用，如果包含&amp;quot;v&amp;quot;，则是value若引用，如果两个字符均存在，就是key value弱引用。见如下代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;k&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;collectgarbage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--仅仅输出2&lt;/p&gt;

&lt;p&gt;在上面的代码示例中，第一个key在被存放到table a之后，就被第二个key的定义所覆盖，因此它的唯一引用来自key弱引用表。事实上，这种机制在Java中也同样存在，Java在1.5之后的版本中也提供了一组弱引用容器，其语义和Lua的弱引用table相似。
&lt;font color=&quot;blue&quot;&gt;最后需要说明的是，Lua中的弱引用表只是作用于table类型的变量，对于其他类型的变量，如数值和字符串等，弱引用表并不起任何作用。&lt;/font&gt;&lt;/p&gt;

&lt;h2&gt;备忘录(memoize)函数：&lt;/h2&gt;

&lt;p&gt;用“空间换时间”是一种通用的程序运行效率优化手段，比如：对于一个普通的Server，它接受到的请求中包含Lua代码，每当其收到请求后都会调用Lua的loadstring函数来动态解析请求中的Lua代码，如果这种操作过于频率，就会导致Server的执行效率下降。要解决该问题，我们可以将每次解析的结果缓存到一个table中，下次如果接收到相同的Lua代码，就不需要调用loadstirng来动态解析了，而是直接从table中获取解析后的函数直接执行即可。这样在有大量重复Lua代码的情况下，可以极大的提高Server的执行效率。反之，如果有相当一部分的Lua代码只是出现一次，那么再使用这种机制，就将会导致大量的内存资源被占用而得不到有效的释放。在这种情况下，如果使用弱引用表，不仅可以在一定程度上提升程序的运行效率，内存资源也会得到有效的释放。见如下代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--results表中的key是字符串形式的Lua代码&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_loadstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;loadstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 22 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/22/lua-weaktable.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/22/lua-weaktable.html</guid>
        
        
      </item>
    
      <item>
        <title>Git常用命令备忘</title>
        <description>&lt;h2&gt;Git配置&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git config --global user.name &amp;quot;robbin&amp;quot;   
git config --global user.email &amp;quot;fankai@gmail.com&amp;quot;
git config --global color.ui true
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor &amp;quot;mate -w&amp;quot;    # 设置Editor使用textmate
git config -l  # 列举所有配置
用户的git配置文件~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git常用命令:查看、添加、提交、删除、找回，重置修改文件&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git help &amp;lt;command&amp;gt;  # 显示command的help
git show            # 显示某次提交的内容
git show $id

git co  -- &amp;lt;file&amp;gt;   # 抛弃工作区修改
git co  .           # 抛弃工作区修改

git add &amp;lt;file&amp;gt;      # 将工作文件修改提交到本地暂存区
git add .           # 将所有修改过的工作文件提交暂存区

git rm &amp;lt;file&amp;gt;       # 从版本库中删除文件
git rm &amp;lt;file&amp;gt; --cached  # 从版本库中删除文件，但不删除文件

git reset &amp;lt;file&amp;gt;    # 从暂存区恢复到工作文件
git reset -- .      # 从暂存区恢复到工作文件
git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci &amp;lt;file&amp;gt;       
git ci .
git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
git ci -am &amp;quot;some comments&amp;quot;
git ci --amend      # 修改最后一次提交记录
git commit --amend  #修改最后一次提交注释的，利用–amend参数  

git revert &amp;lt;$id&amp;gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
git revert HEAD     # 恢复最后一次提交的状态
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看文件diff&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git diff &amp;lt;file&amp;gt;     # 比较当前文件和暂存区文件差异
git diff
git diff &amp;lt;$id1&amp;gt; &amp;lt;$id2&amp;gt;   # 比较两次提交之间的差异
git diff &amp;lt;branch1&amp;gt;..&amp;lt;branch2&amp;gt; # 在两个分支之间比较 
git diff --staged   # 比较暂存区和版本库差异
git diff --cached   # 比较暂存区和版本库差异
git diff --stat     # 仅仅比较统计信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;查看提交记录&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git log
git log &amp;lt;file&amp;gt;      # 查看该文件每次提交记录
git log -p &amp;lt;file&amp;gt;   # 查看每次详细修改内容的diff
git log -p -2       # 查看最近两次详细修改内容的diff
git log --stat      # 查看提交统计信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;tig&lt;/h2&gt;

&lt;p&gt;Mac上可以使用tig代替diff和log，brew install tig&lt;/p&gt;

&lt;h2&gt;Git 本地分支管理查看、切换、创建和删除分支&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git br -r           # 查看远程分支
git br &amp;lt;new_branch&amp;gt; # 创建新的分支
git br -v           # 查看各个分支最后提交信息
git br --merged     # 查看已经被合并到当前分支的分支
git br --no-merged  # 查看尚未被合并到当前分支的分支

git co &amp;lt;branch&amp;gt;     # 切换到某个分支
git co -b &amp;lt;new_branch&amp;gt; # 创建新的分支，并且切换过去
git co -b &amp;lt;new_branch&amp;gt; &amp;lt;branch&amp;gt;  # 基于branch创建新的new_branch

git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &amp;lt;new_branch&amp;gt;  # 把某次历史提交记录checkout出来，创建成一个分支

git br -d &amp;lt;branch&amp;gt;  # 删除某个分支
git br -D &amp;lt;branch&amp;gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;分支合并和rebase&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git merge &amp;lt;branch&amp;gt;               # 将branch分支合并到当前分支
git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master &amp;lt;branch&amp;gt;       # 将master rebase到branch，相当于：
git co &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git rebase master &amp;amp;&amp;amp; git co master &amp;amp;&amp;amp; git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git补丁管理(方便在多台机器上开发同步时用)&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git diff &amp;gt; ../sync.patch         # 生成补丁
git apply ../sync.patch          # 打补丁
git apply --check ../sync.patch  # 测试补丁能否成功
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git暂存管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git stash                        # 暂存
git stash list                   # 列所有stash
git stash apply                  # 恢复暂存的内容
git stash drop                   # 删除暂存区
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git远程分支管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git pull                         # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 # 抓取远程仓库更新
git merge origin/master          # 将远程主分支合并到本地当前分支
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
git co -b &amp;lt;local_branch&amp;gt; origin/&amp;lt;remote_branch&amp;gt;  # 基于远程分支创建本地分支，功能同上

git push                         # push所有分支
git push origin master           # 将本地主分支推到远程主分支
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &amp;lt;local_branch&amp;gt;   # 创建远程分支， origin是远程仓库名
git push origin &amp;lt;local_branch&amp;gt;:&amp;lt;remote_branch&amp;gt;  # 创建远程分支
git push origin :&amp;lt;remote_branch&amp;gt;  #先删除本地分支(git br -d &amp;lt;branch&amp;gt;)，然后再push删除远程分支
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Git远程仓库管理&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote -v                    # 查看远程服务器地址和仓库名称
git remote show origin           # 查看远程服务器仓库状态
git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址
git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)
git remote rm &amp;lt;repository&amp;gt;       # 删除远程仓库
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建远程仓库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上

mkdir robbin_site.git &amp;amp;&amp;amp; cd robbin_site.git &amp;amp;&amp;amp; git --bare init # 在服务器创建纯仓库
git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址
git push -u origin master                                      # 客户端首次提交
git push -u origin develop    # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master   # 设置远程仓库的HEAD指向master分支
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;也可以命令设置跟踪远程库和本地库&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://robbinfan.com/blog/34/git-common-command&quot;&gt;原文参考链接HERE&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/22/gitmemo.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/22/gitmemo.html</guid>
        
        
      </item>
    
      <item>
        <title>小团队的技术管理</title>
        <description>&lt;h2&gt;&lt;a href=&quot;http://news.cnblogs.com/n/511425/&quot;&gt;原文链接&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;　　最近一年左右兼职技术管理的经验试总结，核心理念就是以人为本。&lt;/p&gt;

&lt;h2&gt;小作坊&lt;/h2&gt;

&lt;p&gt;　　小项目的构成往往是一个相对有经验的人作为 leader，带几个毕业生构成一个三五个人的小作坊。没有达到配置专门的项目管理人员的程度，因此管人管事管技术，三权集中在一个人身上。&lt;/p&gt;

&lt;p&gt;　　对效率上有好的和坏的影响，但也是不错的选择，开发人员一般是比较难管理的，职业的项目经理很难做好这个事情。&lt;/p&gt;

&lt;p&gt;　　这也从一定程度上让这个 leader 的精力极大分散，很难做较多的 coding 工作，分散在项目管理，对外对内协调，以及人才培养，质量控制等工作。耗散精力，同时也对能力有较大的锻炼，提高了独立生存能力。&lt;/p&gt;

&lt;h2&gt;年龄特点&lt;/h2&gt;

&lt;p&gt;　　之前有专门讨论过，由于婴儿潮的原因，90后人逐渐开始变少，同时由于没有经历过童年的物质匮乏和最近几十年中国经济的快速发展，这代人相对80后更崇尚自由，会少一些牺牲，多一些自我实现，也因此相对更难于管理。&lt;/p&gt;

&lt;p&gt;　　这代人的成长环境也确实优越一些，接触电脑早，教育资源优质，也少走了不少弯路。相比之下，同样是工作两年，明显新生代比曾经的我有诸多优势。当然，这也是相对的。&lt;/p&gt;

&lt;h2&gt;无为&lt;/h2&gt;

&lt;p&gt;　　无为不是什么都不做，而是让无来为，事情本身有自己内在的规律，把一群优秀的人放在一起自然就能做好事情，这种协作的能力是天赋的。无为是尊重客观规律，不做不必要的干涉，在宏观上把控，抓大放小，用养的心态，往往能释放应有的创造力，得到高质量的产出。大部分的控制都是弄巧成拙。&lt;font color=&#39;purple&#39;&gt;这一点作为90后，亦是相当的认同。当然，对于作者后面讲到的无为所致使缺陷，也是不做反驳。毕竟是人，每个人都有其特点;而且，从于何人，事于何地，也需另当别论的。&lt;/font&gt;&lt;/p&gt;

&lt;h2&gt;以人为本&lt;/h2&gt;

&lt;p&gt;　　工作为了什么，首先是钱，然后是成长，再然后是实现理想。&lt;/p&gt;

&lt;p&gt;　　培养和保持一个精英团队，对技术有卓越的追求，互相认可彼此的技术水平，这样的环境在国内是十分稀少的，自然会在一定程度上珍惜。&lt;/p&gt;

&lt;p&gt;　　独立承担更多的责任，而不是把底层自己实现掉，剩余 ui 层来做。对管理者来说，大部分的模块已经没有什么挑战了，应该放手放权让组员独立承担，对自己精力是一个解放，可以锻炼了组员独立解决问题的能力。如果每个人都能做到自我管理独当一面，就有机会变得轻松了。寻找一些有技术深度的点出来，把部分预研工作交出去。独立面对产品和 ui，节省自我的精力，也对组员有好处。&lt;/p&gt;

&lt;p&gt;　　抓大放下，不深入细节，过多的控制有副作用，细节的争论消耗精力，又因为组员把全部精力投入到一个点上，因此也很难占到便宜。&lt;/p&gt;

&lt;p&gt;　　保持coding，要有自己的核心技术，否则，很快就会受到挑战。管理者有点像是坦克和治疗的责任，来保证 dps 全力输出。&lt;/p&gt;

&lt;p&gt;　　我推崇流程尽可能的弱，因为几乎每个流程都有副作用。deadline 会影响质量，refine 然后就不被鼓励，指标越精细越抑制创造力的发挥。如果大家都是 kpi 导向，就没办法做到卓越，真正的卓越从每个人的自我实现中涌现出来。&lt;/p&gt;

&lt;p&gt;　　真诚沟通，不是从公司的角度，而是从对方的角度，究竟我认为怎么做是对的。在一个公司待的时间毕竟有限，三五年可能就不在了，一个互联网公司的寿命本身就短。技术也一样，很快就过时。作为个人和团队，应当如何共同应对这些挑战。&lt;/p&gt;

&lt;p&gt;　　程序员把代码看做自己的孩子，因此要尊重组员的代码，这样他们才能用最大的爱心和热心来维护这部分。 曾经我让G同学改了H同学的部分代码来实现一个需求优化，后面有问题找H同学，感觉他的意思就是，代码被G改乱了，他不想管了。这也说明了，保持所有组员的高水准的必要性。之前我也接手过一些代码的维护工作，坏味道非常重，非重写不可。持续产出低质量代码的人，应该从编码工作中脱离出来，或者隔离到一个不被任何人依赖的地方。&lt;font color=&quot;purple&quot;&gt;此一段 每一观皆讲到我的心坎里&lt;/font&gt;&lt;/p&gt;

&lt;h2&gt;无为的缺点&lt;/h2&gt;

&lt;p&gt;　　无为执行起来实际上非常的困难，也有一些不利的方面。类似民主，能释放创造力，有时又效率地下。无为相信人，但人终究有时不可靠的，这就导致有可能出现有人吃大锅饭，或者自我管理能力不强失控的情况出现。&lt;/p&gt;

&lt;p&gt;　　具体表现在时间和进度上容易失控，如何及时发现和化解这种风险，而不是视而不见。因此需要一个清晰的项目计划和任务估计，一方面及时发现风险，一方面也是对时间管理能力的锻炼，这一点很重要。&lt;/p&gt;

&lt;p&gt;　　人治有好处也有缺点，容易形成军阀割据的情况，因此聪明的管理者会引入法制来进行约束，法制把人拉回平等的水平，一定程度上也是必要的。 也就是，以德治国是不够的，还需要依法治国。&lt;/p&gt;

&lt;p&gt;　　在中国很难有纯技术的环境，不得不在一定程度上 kpi 导向，国内的各种创新院研究院，都没有好下场。因此，要保持平衡。&lt;/p&gt;

&lt;h2&gt;权力的味道&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“如果你们告诉我的有关他们的事是真的，那么我只能说，他们还没有尝到真正的权力的味道。” -宋美龄&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　权力是个好东西，但不能迷恋。有舍才有得。想拥有就会恐惧，就会耗费精力，而实际上拥有与否并非是个人意志所控制的，不如随缘。&lt;/p&gt;

&lt;p&gt;　　物竞天择，换个角度，天竞物择，没有要为了一个具体的事情改变自己。同时又要像水一样，不守一个固定的形态。&lt;/p&gt;

&lt;h2&gt;讽刺&lt;/h2&gt;

&lt;p&gt;　　我曾经有过一个神级的 leader，可惜当时太年轻，选择去挑战而不是学习，错过了不少机会，回想起来十分后悔。如今我也在经历类似的事情，很具讽刺意味。每个人都有缺点，正确的做法是扬长避短，而不是挑刺，所谓三人行必有我师，也只有走过弯路才会懂得。&lt;/p&gt;

&lt;h2&gt;　　我们都还在成长的路上。&lt;/h2&gt;
</description>
        <pubDate>Wed, 17 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/17/manage-technique.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/17/manage-technique.html</guid>
        
        
      </item>
    
      <item>
        <title>sublime text下的Markdown写作</title>
        <description>&lt;h1&gt;&lt;font color=&#39;purple&#39;&gt;sublime text 2(3)下的Markdown写作&lt;/font&gt;&lt;/h1&gt;

&lt;hr&gt;

&lt;h2&gt;什么是 Markdown &lt;a href=&quot;http://zh.wikipedia.org/wiki/Markdown&quot;&gt;wiki&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字 还可以&lt;font color=&#39;blue&#39;&gt;颜色变换&lt;/font&gt; 等等;&lt;/p&gt;

&lt;p&gt;您可以使用 Cmd Markdown：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整理知识，学习笔 记&lt;/li&gt;
&lt;li&gt;发布日记，杂文，所见所想&lt;/li&gt;
&lt;li&gt;撰写发布技术文稿（代码支持）&lt;/li&gt;
&lt;li&gt;撰写发布学术论文（LaTeX 公式支持）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为Windows/Mac/Linux下强大的文本编辑器，st提供了对Markdown语言的支持。通过设置可实现 markdown 预览和转换功能。
而本文介绍的Markdown Preview支持Mathjax语法和目录自动生成。(Windows下)&lt;/p&gt;

&lt;h2&gt;安装Package Control&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;安装包控制扩展可以方便地为st添加拓展。
打开st，按下组合键Control + `，出现控制台，输入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Package Control.sublime-package&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installed_packages_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://sublime.wbond.net/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;%20&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Please restart Sublime Text to finish installation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当看到代码最后一行提示的时候说明安装成功，此时重启st，可在Preferences -&amp;gt; Package Settings看到Package Control。&lt;/p&gt;

&lt;h2&gt;安装markdown preview&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;按下键Ctrl+Shift+p调出命令面板，找到Package Control: install Pakage这一项。搜索markdown preview，点击安装。&lt;/p&gt;

&lt;h2&gt;关于编辑&lt;/h2&gt;

&lt;p&gt;按Ctrl + N 新建一个文档
按Ctrl + Shift + P
使用Markdown语法编辑文档
语法高亮，输入ssm 后回车(Set Syntax: Markdown)&lt;/p&gt;

&lt;h2&gt;关于使用&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Markdown Preview较常用的功能是preview in browser和Export HTML in Sublime Text，前者可以在浏览器看到预览效果，后者可将markdown保存为html文件。
preview inbrowser据称是实时的，但是实践上还是需要在st保存，然后浏览器刷新才能看到新的效果，
好在markdown写得多的话也不需要每敲一行看一次效果。&lt;/p&gt;

&lt;h2&gt;在浏览器预览Markdown文档&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;按Ctrl + Shift + P
输入mp 后回车(Markdown Preview: current file in browser)
此时就可以在浏览器里看到刚才编辑的文档了;
若设置了快捷键,直接(alt+m/..)即可.&lt;/p&gt;

&lt;h2&gt;关于快捷键&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;st支持自定义快捷键，markdown preview默认没有快捷键，我们可以自己为preview in browser设置快捷键。
方法是在Preferences -&amp;gt; Key Bindings User打开的文件的中括号中添加以下代码(可在Key Bindings Default找到格式)：
    { &amp;quot;keys&amp;quot;: [&amp;quot;alt+m&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;markdown_preview&amp;quot;, &amp;quot;args&amp;quot;: { &amp;quot;target&amp;quot;: &amp;quot;browser&amp;quot;} }
&amp;quot;alt+m&amp;quot;可设置为您自己喜欢的按键。
    如果你这里没有看到目录而只是看到代码，说明简书不支持目录自动生成...&lt;/p&gt;

&lt;h2&gt;打印成pdf&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;将markdown转换为pdf应该有很多种方法的。可直接用谷歌浏览器虚拟打印功能生成。
利用Markdown Preview的Preview in Browser功能可以在浏览器上看到html效果。在页面右键-&amp;gt;打印-&amp;gt;另存为pdf-&amp;gt;调节页边距即可将pdf文件下载下来。&lt;/p&gt;

&lt;p&gt;参考链接：
&lt;a href=&quot;http://www.cnblogs.com/heidsoft/p/3896855.html&quot;&gt;1 使用Sublime Text 2 编辑Markdown&lt;/a&gt;
&lt;a href=&quot;http://www.jianshu.com/p/378338f10263&quot;&gt;2 sublime text 2 下的Markdown写作&lt;/a&gt;
&lt;a href=&quot;http://www.cnblogs.com/dezheng/p/3834813.html&quot;&gt;3 Markdown入门基础&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/15/markdown.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/15/markdown.html</guid>
        
        
      </item>
    
      <item>
        <title>基于GitHub Pages搭建的Blog</title>
        <description>&lt;h3&gt;The ScreamSwing Blog Come From &lt;a href=&quot;http://minixalpha.github.io/StrayBirds/&quot;&gt;StrayBirds&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;基于 GitHub Pages 搭建的极简博客，所有操作都可以直接通过浏览器完成。&lt;/p&gt;

&lt;h2&gt;示例&lt;/h2&gt;

&lt;p&gt;可以通过访问 &lt;a href=&quot;http://minixalpha.github.io/StrayBirds/&quot;&gt;StrayBirds&lt;/a&gt; 看到最终
的效果，下面是截图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jeffjade.github.io/ScreamSwing/images/ui_demo.png&quot; alt=&quot;ui-demo&quot;&gt;&lt;/p&gt;

&lt;h2&gt;教程&lt;/h2&gt;

&lt;h3&gt;使用方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;注册 GitHub，得到用户名，例如 minixbeta&lt;/li&gt;
&lt;li&gt;到 &lt;a href=&quot;https://github.com/minixalpha/StrayBirds&quot;&gt;StrayBirds&lt;/a&gt; 页面，单击右上
角的 Fork&lt;/li&gt;
&lt;li&gt;到你 Fork 后的项目中，将 &lt;code&gt;_config.yml&lt;/code&gt; 中的 username 修改为你的用户名 minixbeta&lt;/li&gt;
&lt;li&gt;访问你的博客 http://minixbeta.github.io/StrayBirds/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://jeffjade.github.io/ScreamSwing/images/create_project.gif&quot; alt=&quot;create_project&quot;&gt;&lt;/p&gt;

&lt;p&gt;如果你想修改项目的名字，例如将 StrayBirds 修改为 blog，那么你需要做的是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在项目的 Setting 中将 Repository name 从 StrayBirds 修改为 blog&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;_config.yml&lt;/code&gt; 中的 baseurl 修改为 /blog&lt;/li&gt;
&lt;li&gt;通过 http://minixbeta.github.io/blog/ 来访问你的新博客&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://jeffjade.github.io/ScreamSwing/images/change_project_name.gif&quot; alt=&quot;create_post&quot;&gt;&lt;/p&gt;

&lt;h3&gt;添加文章&lt;/h3&gt;

&lt;p&gt;在 &lt;code&gt;_post&lt;/code&gt; 目录下添加形如 &lt;code&gt;2014-10-26-title.md&lt;/code&gt; 的文章，用 markdown 格式
撰写博客。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jeffjade.github.io/ScreamSwing/images/create_post.gif&quot; alt=&quot;create_post&quot;&gt;&lt;/p&gt;

&lt;h2&gt;感谢&lt;/h2&gt;

&lt;p&gt;博客主题来自 &lt;a href=&quot;https://github.com/orderedlist/modernist&quot;&gt;modernist&lt;/a&gt;, 
开源协议为 &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Dec 2014 00:00:00 +0800</pubDate>
        <link>/2014/12/15/make-githubblg.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/12/15/make-githubblg.html</guid>
        
        
      </item>
    
      <item>
        <title>Java 中的并发</title>
        <description>&lt;h2&gt;如何创建一个线程&lt;/h2&gt;

&lt;p&gt;按 Java 语言规范中的说法，创建线程只有一种方式，就是创建一个 Thread 对象。而从 HotSpot 虚拟机的角度看，创建一个虚拟机线程
有两种方式，一种是创建 Thread 对象，另一种是创建 一个本地线程，加入到虚拟机线程中。&lt;/p&gt;

&lt;p&gt;如果从 Java 语法的角度。有两种方法。&lt;/p&gt;

&lt;p&gt;第一是继承 Thread 类，实现 run 方法，并创建子类对象。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startThreadUseSubClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;start thread using Subclass of Thread&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一种是传递给 Thread 构造函数一个 Runnable 对象。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startThreadUseRunnalbe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;start thread using runnable&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然， Runnalbe 对象，也不是只有这一种形式，例如如果我们想要线程执行时返回一个值，就需要用到另一种 Runnalbe 对象，它
对原来的 Runnalbe 对象进行了包装。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startFutureTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FutureTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;future result &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecutionException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;结束线程&lt;/h2&gt;

&lt;h2&gt;wait 与 sleep&lt;/h2&gt;

&lt;p&gt;sleep 会使得当前线程休眠一段时间，但并不会释放已经得到的锁。&lt;/p&gt;

&lt;p&gt;wait 会阻塞住，并释放已经得到的锁。一直到有人调用 notify 或者 notifyAll，它会重新尝试得到锁，然后再唤醒。&lt;/p&gt;

&lt;h2&gt;线程池&lt;/h2&gt;

&lt;h3&gt;好处&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;复用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程池中有一系列线程，这些线程在执行完任务后，并不会被销毁，而会从任务队列中取出任务，执行这些任务。这样，就避免为每个任务
都创建线程，销毁线程。 在有大量短命线程的场景下，如果创建线程和销毁线程的时间比线程执行任务的时间还长，显然是不划算的，这时候，使用线程池就会有明显
的好处。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;流控&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时，可以设置线程数目，这样，线程不会增大到影响系统整体性能的程度。当任务太多时，可以在队列中排队，
如果有空闲线程，他们会从队列中取出任务执行。&lt;/p&gt;

&lt;h3&gt;使用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;线程数目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，线程的数目要设置成多少呢？这需要根据任务类型的不同来设置，假如是大量计算型的任务，他们不会阻塞，那么可以将线程数目设置
为处理器数目。而如果任务中涉及大量IO，有些线程会阻塞住，这样就要根据阻塞线程数目与运行线程数目的比例，以及处理器数目来设置
线程总数目。例如阻塞线程数目与运行线程数目之比为n, 处理器数目为p，那么可以设置 n * (p + 1) 个线程，保证有 n 个线程处于运行
状态。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Executors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JDK 的 java.util.concurrent.Executors 类提供了几个静态的方法，用于创建不同类型的线程池。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;newFixedThreadPool&lt;/code&gt; 可以创建固定数目的线程，一旦创建不会自动销毁线程，即便长期没有任务。除非显式关闭线程池。如果任务队列中有任务，就取出任务执行。&lt;/p&gt;

&lt;p&gt;另外，还可以使用 &lt;code&gt;newCachedThreadPool&lt;/code&gt; 方法创建一个不设定固定线程数目的线程池，它有一个特性，线程完成任务后，如果一分钟之内又有新任务，就会复用这个线程执行新任务。如果超过一分钟还没有任务执行，就会自动销毁。&lt;/p&gt;

&lt;p&gt;另外，还提供了 &lt;code&gt;newSingleThreadExecutor&lt;/code&gt; 创建有一个工作线程的线程池。&lt;/p&gt;

&lt;h3&gt;原理&lt;/h3&gt;

&lt;p&gt;JDK 中的线程池通过 HashSet 存储工作者线程，通过 BlockingQueue 来存储待处理任务。&lt;/p&gt;

&lt;p&gt;通过核心工作者数目(corePoolSize) 和 最大工作者数目(maximumPoolSize) 来确定如何处理任务。如果当前工作者线程数目
小于核心工作者数目，则创建一个工作者线程执行这个任务。否则，将这个任务放入待处理队列。如果入队失败，再看看当前工作
者数目是不是小于最大工作者数目，如果小于，则创建工作者线程执行这个任务。否则，拒绝执行这个任务。&lt;/p&gt;

&lt;p&gt;另外，如果待处理队列中没有任务要处理，并且工作者线程数目超过了核心工作者数目，那么，需要减少工作者线程数目。&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Sep 2014 00:00:00 +0800</pubDate>
        <link>/2014/09/20/java-concurrency.html</link>
        <guid isPermaLink="true">/ScreamSwing/2014/09/20/java-concurrency.html</guid>
        
        
      </item>
    
  </channel>
</rss>
